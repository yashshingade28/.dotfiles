<snippet>
	<content><![CDATA[
template <typename Weight, typename Distance>
void dijkstra(int s, const std::vector<std::vector<std::pair<int, Weight>>> &adj, std::vector<Distance> &d, std::vector<int> &p) {
    int n = adj.size();
    d.assign(n, std::numeric_limits<Distance>::max());
    p.assign(n, -1);

    d[s] = 0;
    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
    pq.push({0, s});

    while (!pq.empty()) {
        auto [u, d_u] = pq.top();
        pq.pop();

        if (d_u != d[u]) continue;

        for (auto [v, w] : adj[u]) {
            if (d[u] + w < d[v]) {
                d[v] = d[u] + w;
                p[v] = u;
                pq.push({d[v], v});
            }
        }
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dijkstra</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
